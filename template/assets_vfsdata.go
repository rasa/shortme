// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 11, 21, 16, 20, 40, 154361300, time.UTC),
		},
		"/doc.go": &vfsgen۰FileInfo{
			name:    "doc.go",
			modTime: time.Date(2018, 11, 21, 3, 21, 26, 156175500, time.UTC),
			content: []byte("\x2f\x2f\x67\x6f\x3a\x67\x65\x6e\x65\x72\x61\x74\x65\x20\x76\x66\x73\x67\x65\x6e\x64\x65\x76\x20\x2d\x73\x6f\x75\x72\x63\x65\x3d\x22\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x72\x61\x73\x61\x2f\x73\x68\x6f\x72\x74\x6d\x65\x2f\x74\x65\x6d\x70\x6c\x61\x74\x65\x22\x2e\x41\x73\x73\x65\x74\x73\x0a\x0a\x70\x61\x63\x6b\x61\x67\x65\x20\x74\x65\x6d\x70\x6c\x61\x74\x65\x0a"),
		},
		"/health.html": &vfsgen۰FileInfo{
			name:    "health.html",
			modTime: time.Date(2018, 11, 4, 17, 55, 4, 333016300, time.UTC),
			content: []byte("\x4f\x4b"),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2018, 11, 21, 16, 19, 48, 775422600, time.UTC),
			uncompressedSize: 6472,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xdb\x73\xda\x3a\xb7\x7f\xef\x4c\xff\x07\xd5\xe7\xcc\x34\x6d\x8e\x6d\x2e\xb9\xd0\xb3\x21\x73\x72\x81\x14\x08\xb9\x41\xae\x7b\xfa\x20\xdb\xcb\xb6\x40\x96\x8c\x24\x1b\x48\xa7\xff\xfb\x19\xd9\x40\x0c\x21\xdd\x4d\xf7\xb7\xbf\x99\x2f\x2f\x58\xcb\x5a\xb7\xdf\xba\x78\x49\xa9\x7f\x38\xb9\x38\x1e\x3c\x5c\x36\x51\xa8\x22\x7a\xf0\xfe\x5d\x5d\xff\x22\x8a\x59\xd0\x30\x80\x19\x07\xef\xdf\x21\x54\x0f\x01\x7b\xd9\x13\x42\xf5\x08\x14\x46\x6e\x88\x85\x04\xd5\x30\x12\xe5\x9b\x35\x63\xe5\x1d\xc3\x11\x34\x8c\x94\xc0\x24\xe6\x42\x19\xc8\xe5\x4c\x01\x53\x0d\x63\x42\x3c\x15\x36\x3c\x48\x89\x0b\x66\xb6\xf8\x1f\x44\x18\x51\x04\x53\x53\xba\x98\x42\xa3\xbc\x2a\x29\x54\x2a\x36\x61\x9c\x90\xb4\x61\xdc\x9b\x37\x87\xe6\x31\x8f\x62\xac\x88\x43\xa1\x20\xb6\xdd\x6c\x80\x17\xc0\x92\xf5\x83\x69\xa2\x41\x08\x08\x3b\x3c\x05\x54\x45\x99\x28\x85\x03\x89\x3e\x47\x89\x54\x9f\x91\xcb\x23\x40\x3e\x11\x52\x21\xc2\x90\x0a\x01\x69\xff\xfe\x40\x98\xcd\x10\x57\x21\x88\x6c\xbd\x50\x80\x34\x53\xce\xf3\x19\xfb\x0a\xc4\x67\xcd\x22\x21\x17\x69\x9a\x0b\xb5\x8a\x28\x0a\x07\xdf\xbf\x5b\x03\xfd\xf0\xe3\x47\xdd\xce\x29\xf3\xd7\x94\xb0\x11\x12\x40\x1b\x06\x71\x39\x33\x90\x9a\xc5\xd0\x30\x48\x84\x03\xb0\xa7\x66\x4e\x0b\x05\xf8\x0d\xc3\xf6\x71\xaa\xd7\x16\x71\xb9\xf1\x2b\xec\x31\x0b\x5e\xf0\x6a\xda\x86\xa8\x78\x20\x5d\x41\x62\x45\xb4\x8c\x25\x82\x0f\xa0\xd0\x21\xcb\x5d\xbf\xb9\x3e\x43\xfd\x90\x0b\x05\x8c\xb0\x00\xf5\x41\xe8\x70\x69\xa0\x4e\xb9\xce\x8a\x4d\x52\x71\xa2\x42\x2e\x0a\x02\x0f\x99\x37\x43\xf7\x64\x19\x93\x42\x64\x0e\xe3\x98\x02\x1a\xf0\xc4\x0d\x51\xdb\xe5\x0c\x6d\x61\x85\x28\x60\xa9\x50\xa5\x54\x9a\x56\x4a\xa5\x78\xfa\xa9\x00\xeb\xb3\xe3\x58\x73\x9a\x4a\x73\xae\xe2\xe5\x26\x52\xf1\xc8\x2c\xfa\x5d\x4c\x05\x8e\x44\xc2\xd0\x04\x1c\xa4\x25\x10\x17\x6b\xef\xb5\x43\x7e\x42\x75\xe2\x09\x00\x56\x50\x58\xf4\x2b\xd3\x18\x71\x87\x50\x30\x27\xe0\x98\x38\x8e\x4d\x17\xc7\x78\x35\x01\x67\x20\xd7\x74\xf6\x15\x56\x89\x44\x47\x58\xa0\xbe\x9a\x51\x40\x5b\x12\x00\xf5\x93\x58\x57\x04\x78\xa8\xa7\x75\x0c\x74\xfe\x38\x40\xf9\x04\xf9\x5c\x20\x9c\x62\x42\xb5\x64\x94\x62\x9a\x80\x2c\x82\xa0\x65\x7e\xc5\x12\x31\x8e\xc0\xf7\xc1\x55\x28\x61\x14\xa4\x44\x33\x9e\xa0\x10\xa7\x90\x65\x71\x2c\x20\x25\x3c\x91\xcb\x8c\x7f\x83\x57\x32\xb3\xd8\x74\xb0\x30\xa5\xb6\xb8\xe0\x9e\x43\xb1\x3b\xda\x10\xc9\x1e\x71\x05\x97\xdc\x57\x68\x40\x28\xc8\xcd\xca\x22\x59\x00\xdd\x74\x39\xf3\x49\x50\x94\x2d\xf8\x44\x82\xc8\xe9\xd6\x34\xa2\x06\xb2\x57\xa1\x3c\xe2\x5c\x49\x25\x70\x8c\x5c\x2e\x00\x1d\xf7\xfb\x1b\x93\x23\x33\x5a\x86\x00\x6a\x91\x16\xba\x79\xc8\xff\xb5\x6d\xd7\x63\x43\x69\xb9\x94\x27\x9e\x4f\xb1\x00\xcb\xe5\x91\x8d\x87\x78\x6a\x53\xe2\x48\x5b\x4d\x88\x52\x20\x4c\x67\xa1\xc7\xde\xb1\xca\x56\xd5\x76\xa5\xb4\x97\x34\x2b\x22\xcc\x72\xa5\x34\x10\x61\x0a\x02\x41\xd4\xac\x61\xc8\x10\x57\x6b\x3b\x66\xef\x78\xf2\xa5\x66\xf7\x5b\xec\xb4\x59\xf3\x3b\x83\xea\xe9\xfd\xa4\x79\xc1\x02\x79\xbb\xff\xa8\x2a\xfb\xe7\xf7\x2d\x8e\xf9\x61\x1c\x3d\x44\xb5\x32\x49\xee\xf9\xe5\xa8\x75\xd1\x99\x74\x6a\xcd\x6b\x6f\xc4\xce\x2e\x7b\x17\x06\xd2\x30\x4a\x2e\x48\x40\x58\xc3\xc0\x8c\xb3\x59\xc4\x93\xf5\x94\x6a\x37\xcb\x25\xb4\x68\xaa\x28\xc4\xee\x28\xcb\x9a\x7e\x22\x7c\xec\x82\xed\x81\x1c\x29\x1e\xa3\x3b\xc2\x3c\x3e\x91\xa8\x86\x9c\x24\x78\x23\x52\x11\x9e\xba\x1e\xb3\x96\x5e\xeb\x85\x06\x4b\x43\x41\xa0\x5c\x32\x17\xea\x4d\x27\x09\xcc\x09\x17\x23\x2c\x78\xc2\xbc\xd7\x90\x91\x97\x8f\x8a\xf9\xa5\xd2\x45\x57\xf1\x30\x38\x1e\x3e\x5c\x92\xaf\x0f\xe1\x74\x27\xbd\xc0\x3b\xc1\x49\xb9\x56\xb1\xfd\xbd\xed\xa7\xf2\xf9\xf6\xd9\xd3\xbd\xd7\xac\xc0\xae\xd3\x3c\xbf\x70\x6e\xc6\xe5\x7d\xbb\x25\xae\x5b\xfd\x5f\x44\xe6\x38\x2b\x7f\x94\xfb\x95\x81\xa2\x42\x22\x91\x82\x28\xa6\x58\xc1\x3a\x08\xf3\xa6\xa1\x13\x9e\xb8\x99\x6f\x52\xb7\xbb\x08\x72\x37\xd6\x31\x5a\xd5\xd5\xd1\xdf\x02\xad\xc2\x03\x27\x09\x02\xdd\x21\xe3\x44\xc4\x5c\x82\xb4\xd0\x09\x67\x1f\x15\xc2\xae\x4a\x30\xa5\x33\xe4\xf2\x78\x36\xff\x54\x54\x10\x25\x0c\xe4\x87\xd5\x92\xfe\x93\xf8\x88\x2a\xd4\x6e\xa2\x2f\xdf\x0e\xea\x79\x63\x46\x52\xb8\xcf\xd6\x0d\x35\xf0\x35\x53\x80\x8c\x39\x93\x24\x05\xd3\xcf\x8a\x16\x0b\xdd\x9c\xad\xa1\x34\x0e\xea\x76\xce\x78\x50\xff\xf0\x27\x30\x8f\xf8\xdf\x9e\x75\x14\x45\x16\xca\xc1\x1a\x4a\x0f\x28\x49\x85\xc5\x40\xd9\x2c\x8e\x9e\x13\xdd\xe4\xbe\xef\x62\x96\x62\xf9\x7f\x65\xab\x64\x95\x6c\x02\x26\x44\x09\xcd\xcb\x37\xe2\x1e\xc8\xa2\xf6\xb5\xa0\x57\x76\xf7\xcc\x59\xf3\x2a\xee\x3a\x5f\x65\xeb\xaa\x34\xab\xee\x97\xca\x94\xef\x3a\x10\x24\xa4\x93\x0c\x4e\x5b\x27\xdb\xe7\x4e\xf5\x74\x5c\x19\x55\xb7\x27\x17\xbc\xf1\x7a\x80\x97\x5e\xad\xa0\xff\x75\xd0\x3b\xdb\x45\x32\x24\x11\xc2\xcc\x43\xd7\x19\x2c\x9e\x35\xcc\xa3\xde\x6e\xd6\x90\xcc\x5b\x2c\xe2\xfe\x7c\x33\x50\x88\x80\x29\x99\x31\x44\xe0\x11\x8c\xc6\x09\x08\xb2\xd2\xaf\xd6\x63\x91\x93\x5f\x07\xf0\x67\xfd\x44\x8f\x4f\xbb\x32\x24\xa9\x5d\xb5\xf6\xad\xea\xf3\x3a\xeb\x21\x2f\x31\xd3\x85\x32\x6e\xb5\x47\xd7\xf2\xf6\xc2\xee\xec\x72\x41\x7b\xe9\xb4\x5b\x96\xc1\xa1\xaa\xb4\xee\x07\x7b\xfb\x3c\xd8\x3e\x9f\xb5\x06\xed\xc1\xc3\x53\xea\xb4\x2f\xcb\xed\x0e\x4e\x6f\x9b\xdd\xc7\xde\xfe\xc3\x9d\xfb\x74\x3f\x9a\xc4\x47\xbf\x84\x23\xfa\x7d\x9f\xc4\x12\x68\xbb\x6c\xed\x58\x95\x25\x61\xb3\x4b\x3a\x0d\x82\x3d\x72\xe8\xa7\x8f\xf1\x36\x3b\xb9\xaa\x0c\xbc\xc1\xb5\x7d\x7b\xdb\xed\xf8\x55\xe7\x54\xf0\x9d\xc4\xd9\xf5\xd3\xbb\xfe\xdd\xed\x35\xa9\x9c\x37\x7f\x2d\x0d\xf2\x40\x15\x53\xfc\xe7\x49\xfe\x33\x7f\x86\x3a\x05\x66\x76\xd5\xaa\x5a\xe5\xf9\xe2\x27\xd1\x51\xf2\xaa\x35\x8e\x9b\xd7\x90\xec\x3f\x9e\x85\x47\xb7\x95\xdb\x47\x7a\x98\xec\x3f\xb9\x17\xb7\xdb\xe2\xde\x79\xa0\xad\x8a\x3b\x3e\xaa\xa9\x69\xdb\xae\xe1\x47\x3c\x1c\xc6\x3b\x47\x63\x6f\xfb\x76\xef\x64\xb7\x1d\xa4\xdd\xc1\xaf\xbb\xf7\xdb\xae\x58\x63\xe1\x72\x0f\xec\xb2\x55\x5a\xa5\xfc\x24\x42\x5f\x7a\x4f\x93\x6e\x65\xd4\xe9\x1e\x45\xb2\xd3\xf2\x5c\xf7\x9e\xb7\x4f\x4e\x94\x74\xee\x5a\x61\xcd\x19\x3e\x74\xed\xe3\xfd\x9b\xe1\x51\xf9\x70\x56\x7a\x43\x84\x5e\xe9\x62\x8b\x16\x3b\x7c\x59\xdb\x75\x7b\x7e\xba\xc8\x16\x0e\xf7\x66\xcf\xb1\xf5\x48\x8a\x5c\x8a\xa5\x6c\x18\x7a\x64\xc0\x84\x81\x78\xee\xc8\x85\x61\x8b\xb8\x88\xe1\xd4\xc1\xe2\xb9\xaa\x11\xaa\x33\xbc\x64\x9f\xbf\xcd\x7f\x4c\x0f\x7c\x9c\x50\x65\x3c\x97\xc5\x66\x5d\xa6\x4f\x13\xe2\x15\xb7\xad\x6e\x9c\x8b\xd3\x0e\xe4\x86\xa1\xc2\x5f\x1d\xaf\x6d\x73\x04\x66\xde\x72\x6a\x35\x56\xce\x0a\x78\x55\x87\xed\x91\xf4\x40\x7b\x67\x5b\x0c\xa7\xa6\xcb\x29\xc5\xb1\x84\xa2\x77\xab\xbb\xd6\x4c\x5e\x81\xc1\x66\x38\x5d\x07\xad\x87\x09\xd3\x87\x9a\x98\x33\x7d\xc6\xc9\x06\x50\x14\x0b\x12\x61\x31\x43\x11\x16\x23\x50\xfa\xe3\x16\x81\x94\x38\x00\xc4\x05\x72\x31\xa5\x48\x71\xfd\x7d\xd3\xf3\x73\x51\x41\x01\x91\x61\x12\x39\x5c\x09\xce\x36\x80\x26\x38\x85\x86\x21\xf8\x64\x1d\xa9\x55\x11\x84\xc5\x89\x32\x03\xc1\x93\xf8\xe5\xc6\x6c\x73\xb6\x63\x7e\x04\x52\x30\xd5\x67\xcc\x9c\xd5\xe7\x22\xd2\x43\xa6\x12\x9c\x22\xfd\xc6\x74\x81\x29\x10\x06\x22\x5e\xc3\xa0\x9c\x05\x37\xd7\x67\x06\x8a\x29\x76\x21\xe4\xd4\x03\xd1\x30\xce\x38\x0b\xf4\xa9\xc7\x42\x8b\x92\x9b\x4c\x26\x56\xc0\x79\x40\xf3\x62\x63\xee\x8b\xd0\xfe\xd4\x68\xd3\x51\x6c\x33\x43\xc6\xe4\x24\x4a\x71\x36\xb7\x5e\x26\x4e\x44\x9e\xed\x77\x14\x43\x8e\x62\xa6\x4c\x5c\x57\x8f\xf7\x1a\xeb\x14\x72\xeb\xb3\x12\x3a\xca\x98\x0d\xc4\x99\x4b\x89\x3b\x6a\x18\xd9\x51\x6d\xeb\xe3\xdc\xb5\x8f\x9f\x8c\x83\x8c\x52\xb7\x73\x35\x9b\xed\xce\xf2\xe6\x45\x08\x5e\x50\x37\x50\xb4\xc7\x4b\x63\x6e\xae\xcf\x8e\x28\x66\xa3\x33\xc2\x40\x97\xf5\xc6\xdd\x73\xcf\x5e\x8f\xfa\x52\x1c\x30\xf0\xb2\xf0\xcc\x59\xc2\x9d\x3c\x84\x8b\xac\x74\x39\x35\xa7\xd2\xdc\x59\x09\xec\x06\xb5\x9b\x25\x5f\x5d\x1b\xcf\xe5\xfd\x77\x04\xdd\x5c\x9f\x5d\xea\x83\x16\x4c\xde\x2c\x70\x95\xb2\x58\xfd\xa7\x95\xd1\x22\xf6\x6b\x75\xd4\x5f\x00\x94\x17\xd3\xf7\xef\x56\x7f\xbe\xf1\xc7\x8f\x7f\x77\xfd\xcc\x53\x26\xb7\x17\xa6\x31\x66\xde\x8b\xca\x69\x66\xe4\xad\x8f\x0b\x77\x74\xed\xe4\xb4\x7f\xba\x78\x72\x83\xb2\x4c\xfa\x17\xd5\x4f\x41\xe2\x9b\xca\x07\x15\x19\xff\xaa\x02\x16\x7b\xff\x6e\x25\x15\x74\xfe\x4e\x21\x15\x57\xf9\x73\xfe\x45\xb3\x97\x9f\x40\x54\x1c\x0f\x37\xdc\x21\x74\x70\x8a\xfb\xd9\x08\x92\xef\x69\xbc\xf9\x6f\xed\x6a\xe6\x52\xd7\x81\x87\xb0\xca\xae\x61\x80\x79\xfa\xfc\xa1\x1f\x3d\xee\x26\xfa\xf8\x81\x24\xcf\x6f\x68\x70\x00\x12\x51\x8e\x3d\xe4\x63\xa9\xa0\x30\xae\xfc\xce\xf0\xf7\xda\xdd\xc5\x70\xfd\xea\x62\xf3\x60\x7b\x1c\xfa\xe3\xf1\x34\x79\xbc\x39\x66\x9d\x7e\xb7\xba\xdd\xbb\x8f\x2e\xcf\xdb\xb3\xe6\xde\xa3\x73\x17\x56\xda\xbd\x71\xb3\xb2\x53\x16\x0f\x64\xdc\x99\xce\x7a\xe4\x71\xef\xe2\xce\xee\x44\x8f\x57\xbb\x52\x4d\x9a\x37\x67\x83\xd9\x1b\xe6\xf6\xbf\x7f\x81\xb1\x09\x9e\xd7\x2e\x2c\x86\x7f\x71\x5f\xb1\x19\x8e\xe6\x63\xb7\x7b\x51\x4d\xbf\x0e\xf7\x8e\xbf\x76\xaf\x2e\xdb\x64\x77\xfb\xc6\x79\x4a\xa7\xfb\xa7\xc3\xe3\x43\x3f\x70\xec\x4a\x2d\x3d\x1d\x06\x74\x56\x1b\x77\x9d\xca\x49\x6f\xbc\x7f\xbb\x7b\x52\xe1\xb6\x7d\x34\x8c\xbf\x3c\x95\xaa\x6f\x1d\x92\x0f\x8a\x03\x99\x6d\x9b\xa6\x3e\xc2\x1f\x9f\x1c\x0e\x0e\xff\xb4\xed\x6c\xac\x7b\xff\xee\xbf\xb7\x8c\xff\x5a\x8c\x2d\x9f\xac\x11\xcc\x62\x01\x52\x6e\xf9\x09\xcb\xa6\xb0\x2d\x48\x81\xa9\x4f\xe8\xfb\xfb\x77\x88\xf8\x28\x5f\x5a\x93\x90\xb8\x21\x6a\x34\x50\xb9\x9a\xbf\x42\x39\x3d\x16\xd9\xef\x49\x3e\xfc\x6e\x7d\xfa\x43\xbf\xd2\x1a\x8a\xa3\xc5\x27\x2b\xeb\x8f\xf9\xdb\x1f\xef\xdf\xfd\xd0\x0f\xcb\x4d\xff\xac\x1d\x2b\x9d\x7a\xa3\x21\x39\x60\x73\xb0\xbe\x7d\x5b\xb6\x81\x55\x7c\x19\x5f\x43\xf8\x81\x27\x88\x01\x78\x7a\x7e\x05\x96\x5d\xb2\x3e\x37\x81\x8c\x98\xdd\xaa\x92\x14\xe8\x0c\x25\x12\xf2\x1b\x24\x5d\xad\xd6\x42\xc3\x8a\xcc\xba\x3d\x3f\xa7\xd4\xed\xf9\xbf\x4d\xfe\x3f\x00\x00\xff\xff\x7f\x20\xc5\x5f\x48\x19\x00\x00"),
		},
		"/template.go": &vfsgen۰CompressedFileInfo{
			name:             "template.go",
			modTime:          time.Date(2018, 11, 21, 3, 21, 26, 154175400, time.UTC),
			uncompressedSize: 312,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xc1\x4a\xc4\x30\x10\x86\xcf\x99\xa7\x18\x73\x6a\xb0\x24\x77\xa1\x07\x61\x59\xf0\xa4\x07\x5f\x20\xdb\xce\xa6\xc1\x34\x09\x93\xe9\x82\xc8\xbe\xbb\xb4\xbb\xa2\x9e\x7e\x42\xbe\xff\xe7\x63\x9c\xc3\xc7\xd3\x1a\xd3\x84\x13\x5d\x00\xaa\x1f\x3f\x7c\x20\x14\x5a\x6a\xf2\x42\x00\x71\xa9\x85\x05\x3b\x50\x3a\x14\xb7\xa3\x1a\x94\x4e\x25\x6c\x91\x49\xdc\x2c\x52\x35\x18\x80\xf3\x9a\x47\xbc\xf1\x6f\x5e\xe6\xf7\x72\x88\xdc\xfd\xbe\xb1\x09\xc7\x1c\xcc\x3d\xf1\x0b\x54\xed\x91\x98\xf1\x69\xc0\x7d\xd8\xbe\xec\xf0\x9f\x4e\x8f\x5a\xf7\xf7\xcf\x63\xcc\xd3\x6b\x4e\x9f\x06\x54\x3c\xef\xbd\x87\x01\x73\x4c\xdb\x90\x4a\x25\xd8\xa3\x17\x9f\x52\xee\x88\xd9\x80\xba\x82\x62\x92\x95\x33\x56\x7b\x88\x0c\x57\x80\x8b\x67\x7c\x6e\x8d\xa4\xe1\x80\x9b\xb6\xfd\x6f\x78\x33\xd6\x21\xca\xbc\x9e\xec\x58\x16\xc7\xbe\x79\xd7\xe6\xc2\xb2\x90\xfb\x39\x8a\x36\x06\xbe\x03\x00\x00\xff\xff\x2b\x11\xe0\x47\x38\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/doc.go"].(os.FileInfo),
		fs["/health.html"].(os.FileInfo),
		fs["/index.html"].(os.FileInfo),
		fs["/template.go"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
