// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 11, 29, 21, 55, 9, 940049300, time.UTC),
		},
		"/health.html": &vfsgen۰FileInfo{
			name:    "health.html",
			modTime: time.Date(2018, 11, 4, 17, 55, 4, 333016300, time.UTC),
			content: []byte("\x4f\x4b"),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2018, 11, 23, 18, 38, 33, 244173000, time.UTC),
			uncompressedSize: 7044,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xf9\x6f\xdb\xb8\x97\xff\xbd\x40\xff\x07\x56\xbb\x40\xd3\x66\x24\xf9\xc8\xe1\xee\xd8\xc1\xe6\xb0\x53\xdb\x49\x93\xc6\x4e\x9a\x64\x30\x08\x28\xe9\x49\xa2\x4d\x91\x32\x49\xc9\x76\x8a\xfc\xef\x0b\x4a\x3e\x64\xc7\xe9\x34\x9d\x99\x05\xbe\xf9\xc5\xe2\xf1\xae\xcf\x3b\xf8\xc8\xd4\xdf\x9d\x5c\x1c\xf7\xef\x2e\x9b\x28\x54\x11\x3d\x78\xfb\xa6\xae\x7f\x11\xc5\x2c\x68\x18\xc0\x8c\x83\xb7\x6f\x10\xaa\x87\x80\xbd\xec\x0b\xa1\x7a\x04\x0a\x23\x37\xc4\x42\x82\x6a\x18\x89\xf2\xcd\x9a\xb1\xb2\xc6\x70\x04\x0d\x23\x25\x30\x8e\xb9\x50\x06\x72\x39\x53\xc0\x54\xc3\x18\x13\x4f\x85\x0d\x0f\x52\xe2\x82\x99\x0d\x7e\x43\x84\x11\x45\x30\x35\xa5\x8b\x29\x34\xca\xab\x9c\x42\xa5\x62\x13\x46\x09\x49\x1b\xc6\xad\x79\x7d\x68\x1e\xf3\x28\xc6\x8a\x38\x14\x0a\x6c\xdb\xcd\x06\x78\x01\x2c\x48\xdf\x99\x26\xea\x87\x80\xb0\xc3\x53\x40\x55\x94\xb1\x52\x38\x90\xe8\x63\x94\x48\xf5\x11\xb9\x3c\x02\xe4\x13\x21\x15\x22\x0c\xa9\x10\x90\xb6\xef\x77\x84\xd9\x14\x71\x15\x82\xc8\xc6\x73\x01\x48\x13\xe5\x34\x1f\xb1\xaf\x40\x7c\xd4\x24\x12\x72\x96\xa6\x39\x17\xab\x88\xa2\x70\xf0\xfd\xbb\xd5\xd7\x1f\x4f\x4f\x75\x3b\x9f\x99\x2d\x53\xc2\x86\x48\x00\x6d\x18\xc4\xe5\xcc\x40\x6a\x1a\x43\xc3\x20\x11\x0e\xc0\x9e\x98\xf9\x5c\x28\xc0\x6f\x18\xb6\x8f\x53\x3d\xb6\x88\xcb\x8d\x9f\x21\x8f\x59\xf0\x8c\x56\xcf\x6d\xf0\x8a\x07\xd2\x15\x24\x56\x44\xf3\x58\x20\x78\x07\x0a\x1d\xb2\xdc\xf4\xeb\xab\x33\xd4\x0b\xb9\x50\xc0\x08\x0b\x50\x0f\x84\x76\x97\x06\xea\x94\xeb\xa8\xd8\xc4\x15\x27\x2a\xe4\xa2\xc0\xf0\x90\x79\x53\x74\x4b\x16\x3e\x29\x78\xe6\x30\x8e\x29\xa0\x3e\x4f\xdc\x10\xb5\x5d\xce\xd0\x16\x56\x88\x02\x96\x0a\x55\x4a\xa5\x49\xa5\x54\x8a\x27\x1f\x0a\xb0\x2e\x0d\xc7\x9a\xd2\x54\x9a\x72\x15\x2f\x37\x91\x8a\x47\x66\xd1\xee\x62\x28\x70\x24\x12\x86\xc6\xe0\x20\xcd\x81\xb8\x58\x5b\xaf\x0d\xf2\x13\xaa\x03\x4f\x00\xb0\x82\xc0\xa2\x5d\x99\xc4\x88\x3b\x84\x82\x39\x06\xc7\xc4\x71\x6c\xba\x38\xc6\xab\x01\x38\x05\xb9\x26\xb3\xa7\xb0\x4a\x24\x3a\xc2\x02\xf5\xd4\x94\x02\xda\x92\x00\xa8\x97\xc4\x3a\x23\xc0\x43\xe7\x5a\x46\x5f\xc7\x8f\x03\x94\x8f\x91\xcf\x05\xc2\x29\x26\x54\x73\x46\x29\xa6\x09\xc8\x22\x08\x9a\xe7\x67\x2c\x11\xe3\x08\x7c\x1f\x5c\x85\x12\x46\x41\x4a\x34\xe5\x09\x0a\x71\x0a\x59\x14\xc7\x02\x52\xc2\x13\xb9\x88\xf8\x57\x58\x25\x33\x8d\x4d\x07\x0b\x53\x6a\x8d\x0b\xe6\x39\x14\xbb\xc3\x0d\x9e\x3c\x27\xae\xe0\x92\xfb\x0a\xf5\x09\x05\xb9\x59\x58\x24\x0b\xa0\x9b\x2e\x67\x3e\x09\x8a\xbc\x05\x1f\x4b\x10\xf9\xbc\x35\x89\xa8\x81\xec\x55\x28\x8f\x38\x57\x52\x09\x1c\x23\x97\x0b\x40\xc7\xbd\xde\x1a\x2e\x85\x08\xc9\x34\x97\x21\x80\x9a\xc7\x86\xae\x20\xf2\x7f\x6c\xdb\xf5\xd8\x40\x5a\x2e\xe5\x89\xe7\x53\x2c\xc0\x72\x79\x64\xe3\x01\x9e\xd8\x94\x38\xd2\x56\x63\xa2\x14\x08\xd3\x99\x0b\xb3\x77\xac\xb2\x55\xb5\x5d\x29\xed\xc5\x9c\x15\x11\x66\xb9\x52\x1a\x88\x30\x05\x81\x20\x6a\xda\x30\x64\x88\xab\xb5\x1d\xf3\xfc\x78\xfc\xa9\x66\xf7\x5a\xec\xb4\x59\xf3\x3b\xfd\xea\xe9\xed\xb8\x79\xc1\x02\x79\xb3\x7f\xaf\x2a\xfb\x5f\x6e\x5b\x1c\xf3\xc3\x38\xba\x8b\x6a\x65\x92\xdc\xf2\xcb\x61\xeb\xa2\x33\xee\xd4\x9a\x57\xde\x90\x9d\x5d\x9e\x5f\x18\x48\x63\x29\xb9\x20\x01\x61\x0d\x03\x33\xce\xa6\x11\x4f\xa4\x71\xb0\xb4\xf6\xfb\x77\x6b\x01\xc6\x43\x44\xd8\x83\x2b\xe5\xd3\x53\x11\xab\x76\xb3\x5c\x42\xf3\xc2\x8b\x42\xec\x0e\xb3\xc8\xea\x25\xc2\xc7\x2e\xd8\x1e\xc8\xa1\xe2\x31\xfa\x46\x98\xc7\xc7\x12\xd5\x90\x93\x04\xbf\x82\x66\x84\x27\xae\xc7\xac\x05\x32\x7a\xa0\x01\xd5\x70\x11\x28\x97\xcc\xb9\x0e\xa6\x93\x04\xe6\x98\x8b\x21\x16\x3c\x61\xde\x4b\xe8\xc9\xcb\x7b\xc5\xfc\x52\xe9\xa2\xab\x78\x18\x1c\x0f\xee\x2e\xc9\xe7\xbb\x70\xb2\x93\x5e\xe0\x9d\xe0\xa4\x5c\xab\xd8\xfe\xde\xf6\x63\xf9\xcb\xf6\xd9\xe3\xad\xd7\xac\xc0\xae\xd3\xfc\x72\xe1\x5c\x8f\xca\xfb\x76\x4b\x5c\xb5\x7a\x3f\x89\x5e\x1b\xca\xa5\x87\xb9\x6a\x0f\x4e\x12\x3c\x2c\x55\xcb\xc1\x2c\x00\x71\x9c\x15\x15\x94\x83\x90\xc1\xa8\x42\x22\x91\x82\x28\xa6\x58\xc1\x46\xd8\x66\xf5\x48\xe7\x12\x71\x33\x34\xa4\xae\xa4\x11\xe4\x86\xaf\xa3\xba\xaa\x5d\x2f\xdf\xfa\x4c\x91\x8e\x3e\x7e\xb4\x7c\x0f\x9c\x24\x08\x74\x51\x8e\x13\x11\x73\x09\xd2\x42\x27\x9c\xbd\x57\x08\xbb\x2a\xc1\x94\x4e\x91\xcb\xe3\xe9\xec\x74\xaa\x20\x4a\x18\xc8\x77\xab\x8a\xfe\x41\x7c\x44\x15\x6a\x37\xd1\xa7\x3f\x0f\xea\xf9\x59\x80\xa4\x70\x97\x5a\x0f\xb4\x0b\x6b\xa6\x00\x19\x73\x26\x49\x0a\xa6\x9f\xd5\x09\x2c\xf4\x79\x60\x0d\xa4\x71\x50\xb7\x73\xc2\x83\xfa\xbb\x3f\x80\x79\xc4\xff\x73\x0d\x8c\x22\xdf\x42\x06\x5a\x03\xe9\x01\x25\xa9\xb0\x18\x28\x9b\xc5\xd1\x32\xb7\x4c\xee\xfb\x2e\x66\x29\x96\xff\x5b\xb6\x4a\x56\xc9\x26\x60\x42\x94\xd0\xbc\x6c\x44\xdc\x03\x59\x54\x61\x2d\x86\x2a\xbb\x7b\xe6\xb4\xf9\x35\xee\x3a\x9f\x65\xeb\x6b\x69\x5a\xdd\x2f\x95\x29\xdf\x75\x20\x48\x48\x27\xe9\x9f\xb6\x4e\xb6\xbf\x38\xd5\xd3\x51\x65\x58\xdd\x1e\x5f\xf0\xc6\xcb\xf1\xb2\x30\x0d\xad\x45\xce\xc3\x42\x9b\x87\x4c\x9b\x87\x99\x36\x0f\x03\x9d\x83\x0b\xd3\xbf\x7f\xb7\x3f\x5a\x6d\xa8\x3d\x2c\xf1\x7b\xd0\xf8\x15\xb6\x7f\xb4\x9f\x9e\x34\xf3\x62\xe2\x7e\xee\x9f\x9f\xed\x22\x19\x92\x08\x61\xe6\xa1\xab\x8c\xd8\xb3\x06\x79\xe0\xb5\x9b\x35\x24\xf3\xb3\x03\x71\x7f\xb6\x19\x28\x44\xc0\x94\xcc\x08\x22\xf0\x08\x46\xa3\x04\x04\x59\x29\xc4\xeb\x1e\xcf\xa7\x51\xa6\xe6\x8b\x6e\xfa\x51\xa1\xd4\xcd\xe1\xae\x0c\x49\x6a\x57\xad\x7d\xab\xba\x1c\x67\xc5\xf1\xb9\x67\x74\x76\x8f\x5a\xed\xe1\x95\xbc\xb9\xb0\x3b\xbb\x5c\xd0\xf3\x74\xd2\x2d\xcb\xe0\x50\x55\x5a\xb7\xfd\xbd\x7d\x1e\x6c\x7f\x99\xb6\xfa\xed\xfe\xdd\x63\xea\xb4\x2f\xcb\xed\x0e\x4e\x6f\x9a\xdd\xfb\xf3\xfd\xbb\x6f\xee\xe3\xed\x70\x1c\x1f\xfd\x8c\xb7\x34\xa8\x73\xe3\x5e\x0a\xeb\x67\xba\x2e\xe9\xff\x2e\x2c\x62\xe1\x30\xbb\x6c\xed\x58\x95\xc5\xc4\x66\x54\x74\xbc\x06\x7b\xe4\xd0\x4f\xef\xe3\x6d\x76\xf2\xb5\xd2\xf7\xfa\x57\xf6\xcd\x4d\xb7\xe3\x57\x9d\x53\xc1\x77\x12\x67\xd7\x4f\xbf\xf5\xbe\xdd\x5c\x91\xca\x97\xe6\x4f\xc5\xeb\xcf\x20\xb0\xa6\xd5\x9a\xfd\xaf\xcc\xe6\x1f\xe1\x31\xd0\xa1\x38\xb5\xab\x56\xd5\x2a\xcf\x06\x3f\x08\x10\x25\xbf\xb6\x46\x71\xf3\x0a\x92\xfd\xfb\xb3\xf0\xe8\xa6\x72\x73\x4f\x0f\x93\xfd\x47\xf7\xe2\x66\x5b\xdc\x3a\x77\xb4\x55\x71\x47\x47\x35\x35\x69\xdb\x35\x7c\x8f\x07\x83\x78\xe7\x68\xe4\x6d\xdf\xec\x9d\xec\xb6\x83\xb4\xdb\xff\x19\x78\x8a\xd9\xdc\xc9\x14\xca\x8e\xd0\xd5\xec\xfd\x75\x53\xad\x91\x70\xb9\x07\x76\xd9\x2a\xad\xce\xfc\x20\x02\x3e\x9d\x3f\x8e\xbb\x95\x61\xa7\x7b\x14\xc9\x4e\xcb\x73\xdd\x5b\xde\x3e\x39\x51\xd2\xf9\xd6\x0a\x6b\xce\xe0\xae\x6b\x1f\xef\x5f\x0f\x8e\xca\x87\xd3\xd2\x4f\x45\xc0\x06\x13\x73\x1d\xfe\xca\xd2\x42\x84\xcc\xcf\xab\xc1\x8b\x9c\xe7\xc7\xd4\x60\xde\x7b\xd4\xed\xd9\xed\x30\x1b\x38\xdc\x9b\x2e\x1b\x38\x8f\xa4\xc8\xa5\x58\xca\x86\xa1\x5b\x3e\x4c\x18\x88\x65\xab\x5c\x68\x96\x89\x8b\x18\x4e\x1d\x2c\x96\xb2\x10\xaa\x33\xbc\x20\x9f\xad\xe6\x3f\xa6\x07\x3e\x4e\xa8\x32\x16\x5b\x5f\x90\x65\xfa\x34\x21\x5e\x71\xdb\xea\xc6\x19\x3b\x6d\x40\xae\x18\x2a\xfc\xd5\xf1\xda\x36\x47\x60\xe6\x2d\x6e\x1d\xc6\xca\x5d\x0f\xaf\xca\xb0\x3d\x92\x1e\x68\xeb\x6c\x8b\xe1\xd4\x74\x39\xa5\x38\x96\x50\xb4\x6e\x75\xd7\x9a\xca\x2b\x30\xd8\x0c\xa7\xeb\xa0\x9d\x63\xc2\xf4\xa5\x34\xe6\x4c\xdf\x51\xb3\x0b\x04\x8a\x05\x89\xb0\x98\xa2\x08\x8b\x21\x28\xdd\x29\x44\x20\x25\x0e\x00\x71\x81\x5c\x4c\x29\x52\x5c\x37\x0b\xfa\xfe\x53\x14\x50\x40\x64\x90\x44\x0e\x57\x82\xb3\x0d\xa0\x09\x4e\xa1\x61\x08\x3e\x5e\x47\x6a\x95\x05\x61\x71\xa2\xcc\x40\xf0\x24\x7e\xbe\x31\xdb\x9c\xed\x98\x5d\x61\x15\x4c\x94\x31\x27\xf5\xb9\x88\xf4\x25\x41\x09\x4e\x91\x5e\x31\x5d\x60\x0a\x84\x81\x88\xd7\x30\x28\x67\xc1\xf5\xd5\x99\x81\x62\x8a\x5d\x08\x39\xf5\x40\x34\x8c\x33\xce\x02\x7d\x6b\xb5\xd0\x3c\x63\xc7\xe3\xb1\x15\x70\x1e\xd0\x3c\x57\x99\xfb\xcc\xb5\x3f\x54\xda\x74\x14\xdb\x4c\x90\x11\x39\x89\x52\x9c\xcd\xb4\x97\x89\x13\x91\xa5\xfe\x8e\x62\xc8\x51\xcc\x94\x89\xeb\xea\xeb\x99\xc6\x3a\x85\x5c\xfb\x2c\xb5\x8e\x32\x62\x03\x71\xe6\x52\xe2\x0e\x1b\x46\x96\x4e\x5b\xef\x67\xa6\xbd\xff\x60\x1c\x64\x33\x75\x3b\x17\xb3\x59\xef\x2c\x6e\x9e\xb9\xe0\xd9\xec\x86\x19\x6d\xf1\x42\x99\xeb\xab\xb3\x23\x8a\xd9\xf0\x8c\x30\xd0\xe9\xbe\x71\xf7\xcc\xb2\x97\xbd\xbe\x60\x07\x0c\xbc\xcc\x3d\x33\x92\x70\x27\x77\xe1\x3c\x2a\x5d\x4e\xcd\x89\x34\x77\x56\x1c\xbb\x41\xec\x66\xce\x5f\xaf\x8c\x65\x7a\xff\x1d\x46\xd7\x57\x67\x97\xfa\xa2\x0c\xe3\x57\x33\x5c\x9d\x99\x8f\xfe\xd3\xd2\x68\xee\xfb\xb5\x3c\xea\xcd\x01\xca\x93\x69\x5e\xea\xaf\xaf\xce\x9e\x9e\xfe\xbf\xf3\x67\x16\x32\xb9\xbe\x30\x89\x31\xf3\x9e\x65\x4e\x33\x9b\xde\x7a\x3f\x37\x47\xe7\x4e\x3e\xf7\x6f\x27\x4f\xae\x50\x16\x49\xff\x50\xfe\x14\x38\xbe\x2a\x7d\x50\x91\xf0\xaf\x32\x60\xbe\xf7\xef\x66\x52\x41\xe6\xaf\x24\x52\x71\x94\x7f\xe7\x27\x9a\xbd\x38\x02\xf3\xb3\xe9\xe5\x37\xa0\x0e\x4e\x71\x2f\x6b\x4d\xf2\x3d\x8d\x57\xff\xad\xdd\xde\x2f\x75\x1e\x78\x08\xab\xec\x19\x0d\x98\xa7\xaf\x59\xfa\xd3\xe3\x6e\xa2\x6f\x59\x48\xf2\xfc\x85\x0d\x07\x20\x11\xe5\xd8\x43\x3e\x96\x0a\xc4\xfa\x33\xc0\x2f\x34\x90\x2f\xbd\x3d\x0d\xd6\x9f\x9e\x36\x37\xcf\xc7\xa1\x3f\x1a\x4d\x92\xfb\xeb\x63\xd6\xe9\x75\xab\xdb\xe7\xb7\xd1\xe5\x97\xf6\xb4\xb9\x77\xef\x7c\x0b\x2b\xed\xf3\x51\xb3\xb2\x53\x16\x77\x64\xd4\x99\x4c\xcf\xc9\xfd\xde\xc5\x37\xbb\x13\xdd\x7f\xdd\x95\x6a\xdc\xbc\x3e\xeb\x4f\x5f\xdb\x59\xae\x3e\x41\xad\x76\x95\xff\xc4\xfb\xd3\x26\x04\x5f\x7a\x6f\x1a\xfc\xc5\x73\xd3\x66\xc4\x9a\xf7\xdd\xee\x45\x35\xfd\x3c\xd8\x3b\xfe\xdc\xfd\x7a\xd9\x26\xbb\xdb\xd7\xce\x63\x3a\xd9\x3f\x1d\x1c\x1f\xfa\x81\x63\x57\x6a\xe9\xe9\x20\xa0\xd3\xda\xa8\xeb\x54\x4e\xce\x47\xfb\x37\xbb\x27\x15\x6e\xdb\x47\x83\xf8\xd3\x63\xa9\xfa\x5a\xc4\x7e\xf8\xec\xb4\x04\x70\x66\xf8\xb2\x9c\xdb\x03\x9c\xe2\x7c\x56\x97\x8e\xff\xde\x32\xfe\x6b\xde\x01\x7d\xb0\x86\x30\x8d\x05\x48\xb9\xe5\x27\x2c\x6b\xe8\xb6\x20\x05\xa6\x3e\xa0\xef\x6f\xdf\x20\xe2\xa3\x7c\x68\x8d\x43\xe2\x86\xa8\xd1\x40\xe5\x6a\xbe\x84\xf2\xf9\x58\x64\xbf\x27\x79\x1f\xbd\xf5\xe1\x77\xbd\xa4\x25\x14\xbb\x94\x0f\x56\x56\x6a\xf3\xd5\xa7\xb7\x6f\x9e\xf4\xc7\x62\xd3\xbf\xab\xc7\x4a\xd1\xdf\xa8\x48\x5e\x3f\x66\x80\xcf\x86\x8c\xaf\x8c\x51\xa1\x54\x20\x22\x91\x9b\x08\x01\x4c\xd1\x29\xf2\x88\xc4\x0e\x05\x2f\xff\x07\x10\x91\x68\xf6\x10\x6d\xa1\x19\x61\x6b\xfe\xe0\xa7\x53\x5e\xb7\xcd\x0e\xa0\x44\x82\x37\x7b\x7f\x27\x29\xd0\xe9\x6f\x45\xf6\x0c\xc0\x93\xb3\x8d\xc0\x32\xe6\xd6\x5c\xc9\x15\xb5\xea\xf6\xec\x8e\x54\xb7\x67\xff\x72\xfb\xbf\x00\x00\x00\xff\xff\xe3\x3d\xad\xcd\x84\x1b\x00\x00"),
		},
		"/nppBackup": &vfsgen۰DirInfo{
			name:    "nppBackup",
			modTime: time.Date(2018, 11, 29, 21, 43, 44, 529846100, time.UTC),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/health.html"].(os.FileInfo),
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
