// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 11, 21, 7, 54, 54, 575693500, time.UTC),
		},
		"/doc.go": &vfsgen۰FileInfo{
			name:    "doc.go",
			modTime: time.Date(2018, 11, 21, 3, 21, 26, 156175500, time.UTC),
			content: []byte("\x2f\x2f\x67\x6f\x3a\x67\x65\x6e\x65\x72\x61\x74\x65\x20\x76\x66\x73\x67\x65\x6e\x64\x65\x76\x20\x2d\x73\x6f\x75\x72\x63\x65\x3d\x22\x67\x69\x74\x68\x75\x62\x2e\x63\x6f\x6d\x2f\x72\x61\x73\x61\x2f\x73\x68\x6f\x72\x74\x6d\x65\x2f\x74\x65\x6d\x70\x6c\x61\x74\x65\x22\x2e\x41\x73\x73\x65\x74\x73\x0a\x0a\x70\x61\x63\x6b\x61\x67\x65\x20\x74\x65\x6d\x70\x6c\x61\x74\x65\x0a"),
		},
		"/health.html": &vfsgen۰FileInfo{
			name:    "health.html",
			modTime: time.Date(2018, 11, 4, 17, 55, 4, 333016300, time.UTC),
			content: []byte("\x4f\x4b"),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2018, 11, 21, 7, 35, 31, 735182800, time.UTC),
			uncompressedSize: 6394,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x59\x73\xdb\xb8\xb2\x7e\x4f\x55\xfe\x43\x87\xf7\x56\xc5\x89\x2f\x49\x2d\xde\x72\x47\x72\x1d\x2f\xf2\x26\x6f\xb1\xa4\xc4\x9e\xa9\x3c\x80\x64\x93\x84\x04\x02\x34\x00\x52\x52\x52\xf9\xef\xa7\x40\x4a\x32\x65\xcb\x99\x38\x33\x73\xaa\x8e\x5f\x44\x34\xd1\xdb\xd7\x0b\x1b\x70\xeb\xcd\xe1\xd5\x41\xff\xee\xba\x03\xb1\x4e\xd8\xee\xeb\x57\x2d\xf3\x0b\x8c\xf0\xa8\x6d\x21\xb7\x76\x5f\xbf\x02\x68\xc5\x48\x82\xe2\x09\xa0\x95\xa0\x26\xe0\xc7\x44\x2a\xd4\x6d\x2b\xd3\xa1\xbd\x63\x2d\xbd\xe3\x24\xc1\xb6\x95\x53\x1c\xa7\x42\x6a\x0b\x7c\xc1\x35\x72\xdd\xb6\xc6\x34\xd0\x71\x3b\xc0\x9c\xfa\x68\x17\x8b\xff\x03\xca\xa9\xa6\x84\xd9\xca\x27\x0c\xdb\xf5\x65\x49\xb1\xd6\xa9\x8d\xf7\x19\xcd\xdb\xd6\xad\x3d\xd8\xb3\x0f\x44\x92\x12\x4d\x3d\x86\x15\xb1\xa7\x9d\x36\x06\x11\x2e\x58\xdf\xd8\x36\xf4\x63\x04\xe2\x89\x1c\xa1\x09\x85\x28\x4d\x22\x05\xef\x93\x4c\xe9\xf7\xe0\x8b\x04\x21\xa4\x52\x69\xa0\x1c\x74\x8c\x60\xfc\xfb\x0d\x08\x9f\x82\xd0\x31\xca\x62\x3d\x57\x00\x86\xa9\xe4\x79\x4f\x42\x8d\xf2\xbd\x61\x51\x58\x8a\xb4\xed\xb9\x5a\x4d\x35\xc3\xdd\x6f\xdf\x9c\xbe\x79\xf8\xfe\xbd\xe5\x96\x94\xd9\x6b\x46\xf9\x08\x24\xb2\xb6\x45\x7d\xc1\x2d\xd0\xd3\x14\xdb\x16\x4d\x48\x84\xee\xc4\x2e\x69\xb1\xc4\xb0\x6d\xb9\x21\xc9\xcd\xda\xa1\xbe\xb0\x7e\x86\x3d\xe5\xd1\x13\x5e\x43\x5b\x11\x95\x00\x95\x2f\x69\xaa\xa9\x91\xb1\x40\xf0\x0e\x35\xec\xf1\xd2\xf5\xc1\xcd\x39\xf4\x62\x21\x35\x72\xca\x23\xe8\xa1\x34\xe1\x32\x40\x1d\x0b\x93\x15\xab\xa4\x92\x4c\xc7\x42\x56\x04\xee\xf1\x60\x0a\xb7\x74\x11\x93\x4a\x64\xf6\xd2\x94\x21\xf4\x45\xe6\xc7\x70\xea\x0b\x0e\x6b\x44\x03\x43\xa2\x34\x34\x6a\xb5\x49\xa3\x56\x4b\x27\xef\x2a\xb0\x3e\x38\x4e\x0c\xa7\xad\x0d\xe7\x32\x5e\x7e\xa6\xb4\x48\xec\xaa\xdf\xd5\x54\x10\x20\x33\x0e\x63\xf4\xc0\x48\xa0\x3e\x31\xde\x1b\x87\xc2\x8c\x99\xc4\x93\x88\xbc\xa2\xb0\xea\x57\xa1\x31\x11\x1e\x65\x68\x8f\xd1\xb3\x49\x9a\xda\x3e\x49\xc9\x72\x02\x4e\x51\x3d\xd2\xd9\xd3\x44\x67\x0a\xf6\x89\x84\x9e\x9e\x32\x84\x35\x85\x08\xbd\x2c\x35\x15\x81\x01\x5c\x18\x1d\x7d\x93\x3f\x1e\x32\x31\x86\x50\x48\x20\x39\xa1\xcc\x48\x86\x9c\xb0\x0c\x55\x15\x04\x23\xf3\x84\x28\xe0\x02\x30\x0c\xd1\xd7\x90\x71\x86\x4a\xc1\x54\x64\x10\x93\x1c\x8b\x2c\x4e\x25\xe6\x54\x64\x6a\x91\xf1\x2f\xf0\x4a\x15\x16\xdb\x1e\x91\xb6\x32\x16\x57\xdc\xf3\x18\xf1\x47\x2b\x22\x79\x41\x7d\x29\x94\x08\x35\xf4\x29\x43\xb5\x5a\x59\xa2\x2a\xa0\xdb\xbe\xe0\x21\x8d\xaa\xb2\xa5\x18\x2b\x94\x25\xdd\x99\x24\xcc\x02\x77\x19\xca\x7d\x21\xb4\xd2\x92\xa4\xe0\x0b\x89\x70\xd0\xeb\xad\x4c\x8e\xc2\x68\x15\x23\xea\x79\x5a\x98\xe6\xa1\xfe\xdf\x75\xfd\x80\x0f\x95\xe3\x33\x91\x05\x21\x23\x12\x1d\x5f\x24\x2e\x19\x92\x89\xcb\xa8\xa7\x5c\x3d\xa6\x5a\xa3\xb4\xbd\xb9\x1e\xb7\xe9\x34\x9d\x2d\xd7\x57\xca\x5d\xd0\x9c\x84\x72\xc7\x57\xca\x02\xca\x35\x46\x92\xea\x69\xdb\x52\x31\x69\x6c\x6e\xd9\xdb\x6a\x33\x3b\x3c\xfe\xdc\xdc\x3b\xb9\x1f\x6f\x4d\xf4\x59\x72\x79\xa9\xe5\xfa\xd5\xfe\xcd\xd9\x80\x45\xa3\xcb\xb3\x8e\xd8\xde\xb9\xde\xf0\x6a\xd3\x9b\x71\xdb\x02\x03\x99\x12\x92\x46\x94\xb7\x2d\xc2\x05\x9f\x26\x22\x53\x4f\xbc\x3e\xed\xd4\x6b\x30\x6f\xa1\x10\x13\x7f\x54\xe4\x48\x2f\x93\x21\xf1\xd1\x0d\x50\x8d\xb4\x48\xe1\x33\xe5\x81\x18\x2b\xd8\x01\x2f\x8b\x5e\x88\x4b\x42\x26\x7e\xc0\x9d\x85\x8f\x66\x61\xa0\x31\x8e\x53\xac\xd7\xec\xb9\x7a\xdb\xcb\x22\x7b\x2c\xe4\x88\x48\x91\xf1\x60\x15\x0e\xcd\x9d\x0d\x5b\x5d\xff\xae\x79\x58\xab\x5d\x75\xb5\x88\xa3\x83\xe1\xdd\x35\x3d\xb9\x8b\x27\x1b\xf9\x15\xd9\x88\x0e\xeb\x3b\x0d\x37\xdc\x5a\xff\x5a\xbf\x5c\x3f\xff\x7a\x1b\x74\x1a\xb8\xe9\x75\x2e\xaf\xbc\xc1\x7d\x7d\xdb\x3d\x92\x37\x47\xbd\x67\xb1\x59\x46\xe6\xa0\x28\x76\x28\xfd\x2a\x40\xd1\x31\x55\xa0\x31\x49\x19\xd1\xf8\x18\x84\x59\x8b\x30\xe9\x4d\xfd\xc2\x37\x65\x9a\x5b\x82\xa5\x1b\x8f\x31\x5a\xd6\x75\x66\x3a\xbf\x51\x11\xa0\x97\x45\x91\xe9\x87\x69\x26\x53\xa1\x50\x39\x70\x28\xf8\x5b\x0d\xc4\xd7\x19\x61\x6c\x0a\xbe\x48\xa7\xb3\x0f\x43\x03\x18\xe5\xa8\xde\x2c\x17\xf0\x1f\x34\x04\xa6\xe1\xb4\x03\x1f\xbe\xec\xb6\xca\x36\x0c\x4a\xfa\x0f\xd6\x0d\x0d\xf0\x3b\xb6\x44\x95\x0a\xae\x68\x8e\x76\x58\x94\x28\x91\xa6\x15\x3b\x43\x65\xed\xb6\xdc\x92\x71\xb7\xf5\xe6\x0f\xe4\x01\x0d\xbf\x3c\xe8\xa8\x8a\xac\x24\xbf\x33\x54\x01\x32\x9a\x4b\x87\xa3\x76\x79\x9a\x3c\xa4\xb5\x2d\xc2\xd0\x27\x3c\x27\xea\x5f\x75\xa7\xe6\xd4\x5c\x8a\x36\x26\x19\x2b\x8b\x35\x11\x01\xaa\xaa\xf6\x15\xc9\x3f\xed\x7c\x4c\xbb\xde\x89\x3a\xfa\x58\x9b\x36\xb7\x6b\x75\x26\x36\x3d\x8c\x32\x7a\x96\xf5\x8f\x8f\x0e\xd7\x2f\xbd\xe6\xf1\x7d\x63\xd4\x5c\x1f\x5f\x89\xe7\x93\xff\xc1\xab\x25\xf4\x4f\xfa\x17\xe7\x9b\xa0\x62\x9a\x00\xe1\x01\xdc\x14\xb0\x04\xce\xb0\x8c\xfa\x69\x67\x07\x54\xd9\x50\x41\x84\xb3\xcd\xc8\x30\x41\xae\x55\xc1\x90\x60\x40\x09\xdc\x67\x28\xe9\x52\x77\x7a\x1c\x8b\x92\xfc\x3c\x80\x3f\xea\x1e\x66\x58\xda\x54\x31\xcd\xdd\xa6\xb3\xed\x34\x1e\xd6\x45\xc7\x58\x8d\xd9\xc6\x95\x3c\x3d\x38\x1c\xee\xdf\x85\x5d\x0c\x3b\xde\xa7\xfe\xf6\xb8\xd3\xbf\x39\xbf\x3c\x1a\x65\xf7\x1b\xfd\xb3\x4f\x9b\x9f\xcf\x8f\xf3\xe1\x7d\x7a\xbc\x37\xfa\x39\xcc\x7e\xdd\x7c\xb9\xc0\xd4\xad\x3b\x1b\x4e\x63\x41\x78\xde\xfa\x68\x8b\xee\x85\xf9\xef\xe9\x3a\x3f\xfc\xd8\xe8\x07\xfd\x1b\xf7\xd3\xa7\xee\x59\xd8\xf4\x8e\xa5\xd8\xc8\xbc\xcd\x30\xff\xdc\xfb\xfc\xe9\x86\x36\x2e\x3b\x3f\x6f\xfd\x72\x36\xff\x38\x9f\x7f\xe4\xcf\xd0\x44\x7b\xea\xd6\x9d\x7a\xdd\x69\xce\x56\x3f\xf0\x45\xaa\xeb\xc1\x71\x30\xb8\xde\xbf\x8d\x08\xcb\x4f\x87\x1b\x77\xdd\x33\x29\x07\x2c\x39\xbf\xf5\xae\xbc\xad\x83\x74\xdb\x0f\x26\xbc\x7e\x8f\x03\xff\x05\xbe\xfc\xb2\xdd\xce\xbd\xf4\x45\x80\x6e\xdd\xa9\x2d\x53\x7e\xe0\xc2\x87\x8b\xaf\xe3\x6e\x63\x74\xd6\xdd\x4f\xd4\xd9\x51\xe0\xfb\xb7\xe2\xf4\xf0\x50\x2b\xef\xf3\x51\xbc\xe3\x0d\xef\xba\xee\xc1\xf6\x60\xb8\x5f\xdf\x9b\xd6\x7e\xd1\x85\x4a\x77\x9a\xb7\xce\xe1\xd3\x9a\x6d\xb9\xb3\x33\x42\xb1\xf0\x44\x30\x7d\x08\x64\x40\x73\xf0\x19\x51\xaa\x6d\x99\x0f\x3f\xa1\x1c\xe5\x43\xa7\xad\x8c\x4c\xd4\x07\x4e\x72\x8f\xc8\x87\x6a\x05\x68\x71\xb2\x60\x9f\xbd\x2d\x7f\xec\x00\x43\x92\x31\x6d\x2d\xb6\x3e\xa3\xcb\x0e\x59\x46\x83\xea\xb6\xe5\x8d\x33\x71\xc6\x81\xd2\x30\xa8\xfc\xb5\xc8\xa3\x6d\x9e\x24\x3c\x58\xcc\x9e\xd6\xd2\xc4\x4f\x96\x75\xb8\x01\xcd\x77\x8d\x77\xae\xc3\x49\x6e\xfb\x82\x31\x92\x2a\xac\x7a\xb7\xbc\xeb\x91\xc9\x4b\x30\xb8\x9c\xe4\x8f\x41\xbb\x20\x94\x9b\xa3\x49\x2a\xb8\x39\xa9\x14\x63\x24\xa4\x92\x26\x44\x4e\x21\x21\x72\x84\xda\x7c\xb4\x12\x54\x8a\x44\x08\x42\x82\x4f\x18\x03\x2d\xcc\x77\xcb\x4c\xc1\x55\x05\x15\x44\x86\x59\xe2\x09\x2d\x05\x5f\x01\x9a\x14\x0c\xdb\x96\x14\xe3\xc7\x48\x2d\x8b\xa0\x3c\xcd\xb4\x1d\x49\x91\xa5\x4f\x37\x16\x9b\x8b\x1d\xb3\x83\x8c\xc6\x89\x39\x29\x96\xac\xa1\x90\x89\x19\x15\xb5\x14\x0c\xcc\x1b\xdb\x47\xae\x51\x5a\x40\x83\xb6\xc5\x04\x8f\x06\x37\xe7\x16\xa4\x8c\xf8\x18\x0b\x16\xa0\x6c\x5b\xe7\x82\x47\xe6\xec\xe2\xc0\xbc\xe4\xc6\xe3\xb1\x13\x09\x11\xb1\xb2\xd8\xb8\xff\x24\xb4\x3f\x34\xda\xf6\x34\x5f\xcd\x50\x30\x79\x99\xd6\x82\xcf\xac\x57\x99\x97\xd0\x07\xfb\x3d\xcd\xc1\xd3\xdc\x56\x99\xef\x9b\x21\xdd\x60\x9d\x63\x69\x7d\x51\x42\xfb\x05\xb3\x05\x82\xfb\x8c\xfa\xa3\xb6\x55\x1c\xb8\xd6\xde\xce\x5c\x7b\xfb\xce\xda\x2d\x28\x2d\xb7\x54\xb3\xda\xee\x22\x6f\x9e\x84\xe0\x09\x75\x05\xc5\x78\xbc\x30\x66\x70\x73\xbe\xcf\x08\x1f\x9d\x53\x8e\xa6\xac\x57\xee\x9e\x79\xf6\x7c\xd4\x17\xe2\x90\x63\x50\x84\x67\xc6\x12\x6f\x94\x21\x9c\x67\xa5\x2f\x98\x3d\x51\xf6\xc6\x52\x60\x57\xa8\x5d\x2d\xf9\xe3\x8d\xf5\x50\xde\x7f\x45\xd0\xe0\xe6\xfc\xda\x1c\x97\x70\xfc\x62\x81\xcb\x94\xf9\xea\xbf\xad\x8c\xe6\xb1\x7f\x54\x47\xbd\x39\x40\x65\x31\x7d\xfb\xe6\xf4\x66\x1b\xbf\x7f\xff\x4f\xd7\xcf\x2c\x65\x4a\x7b\x71\x92\x12\x1e\x3c\xa9\x9c\x4e\x41\x5e\x7b\x3b\x77\xc7\xd4\x4e\x49\xfb\xa7\x8b\xa7\x34\xa8\xc8\xa4\xbf\xa9\x7e\x2a\x12\x5f\x54\x3e\x50\x65\xfc\xb3\x0a\x98\xef\xfd\xab\x95\x54\xd1\xf9\x2b\x85\x54\x5d\x95\xcf\xe5\x17\xcd\x5d\x7c\x02\xa1\x3a\x0b\xae\xb8\x09\x38\x23\x39\xe9\x15\x23\x48\xb9\xa7\xfd\xe2\xbf\x47\x17\x2c\xd7\xa6\x0e\x02\x20\xba\xb8\x4c\x41\x1e\x98\x73\x85\x79\x0c\x84\x9f\x99\x63\x05\x28\x51\xde\xb3\x90\x08\x15\x30\x41\x02\x08\x89\xd2\x58\x19\x57\x7e\x65\xf8\x7b\xee\x06\x62\xf8\xf8\x02\x62\xf5\x04\xd8\xbd\xe5\x9b\x69\x76\x91\x4f\x0e\xc6\xeb\xc1\xde\xdd\x57\x9e\xf1\xf5\x40\x5e\x04\xc7\xf5\xd3\x23\xd6\x24\x51\xb7\x96\xba\xe9\x7d\xff\x43\x77\xef\x27\x8f\x60\xf0\x37\x5d\x42\xac\x82\xe2\xb9\x4b\x87\xe1\x9f\xdc\x39\x3c\x75\xbd\xb9\xb3\x61\x77\x7e\xef\x76\xaf\x9a\xf9\xc9\x70\xeb\xe0\xa4\xfb\xf1\xfa\x94\x6e\xae\x0f\xbc\xaf\xf9\x64\xfb\x78\x78\xb0\x17\x46\x9e\xdb\xd8\xc9\x8f\x87\x11\x9b\xee\xdc\x77\xbd\xc6\xe1\xc5\xfd\xf6\xa7\xcd\xc3\x86\x70\xdd\xfd\x61\xfa\xe1\x6b\xad\xf9\xd2\x81\x78\xb7\x3a\x7c\xb9\xae\x6d\x9b\x63\xf8\xc1\xe1\x5e\x7f\xef\x0f\xd7\x2d\x46\xb8\xd7\xaf\xfe\x77\xcd\xfa\x9f\xf9\x88\xf2\xce\x19\xe1\x34\x95\xa8\xd4\x5a\x98\xf1\x62\xe2\x5a\xc3\x1c\xb9\x7e\x07\xdf\x5e\xbf\x02\x1a\x42\xb9\x74\xc6\x31\xf5\x63\x68\xb7\xa1\xde\x2c\x5f\x41\x49\x4f\x65\xf1\x7b\x58\x0e\xba\x6b\xef\x7e\x33\xaf\x8c\x86\xea\x18\xf1\xce\x29\x7a\x61\xf9\xf6\xfb\xeb\x57\xdf\xcd\xc3\x62\xd3\x3f\x6b\xc7\x52\x57\x5e\x69\x48\x09\xd8\x0c\xac\x2f\x5f\x16\x25\xbf\x8c\x2f\x17\x8f\x10\xbe\x13\x19\x70\xc4\xc0\xcc\xaa\xc8\x8b\x6b\xd1\x87\x82\x2f\x88\xc5\x3d\x28\xcd\x91\x4d\x21\x53\x58\xde\x02\x99\xca\x74\xe6\x1a\x96\x64\xb6\xdc\xd9\x99\xa4\xe5\xce\xfe\xd1\xf1\xef\x00\x00\x00\xff\xff\x17\xf7\x40\x98\xfa\x18\x00\x00"),
		},
		"/template.go": &vfsgen۰CompressedFileInfo{
			name:             "template.go",
			modTime:          time.Date(2018, 11, 21, 3, 21, 26, 154175400, time.UTC),
			uncompressedSize: 312,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xc1\x4a\xc4\x30\x10\x86\xcf\x99\xa7\x18\x73\x6a\xb0\x24\x77\xa1\x07\x61\x59\xf0\xa4\x07\x5f\x20\xdb\xce\xa6\xc1\x34\x09\x93\xe9\x82\xc8\xbe\xbb\xb4\xbb\xa2\x9e\x7e\x42\xbe\xff\xe7\x63\x9c\xc3\xc7\xd3\x1a\xd3\x84\x13\x5d\x00\xaa\x1f\x3f\x7c\x20\x14\x5a\x6a\xf2\x42\x00\x71\xa9\x85\x05\x3b\x50\x3a\x14\xb7\xa3\x1a\x94\x4e\x25\x6c\x91\x49\xdc\x2c\x52\x35\x18\x80\xf3\x9a\x47\xbc\xf1\x6f\x5e\xe6\xf7\x72\x88\xdc\xfd\xbe\xb1\x09\xc7\x1c\xcc\x3d\xf1\x0b\x54\xed\x91\x98\xf1\x69\xc0\x7d\xd8\xbe\xec\xf0\x9f\x4e\x8f\x5a\xf7\xf7\xcf\x63\xcc\xd3\x6b\x4e\x9f\x06\x54\x3c\xef\xbd\x87\x01\x73\x4c\xdb\x90\x4a\x25\xd8\xa3\x17\x9f\x52\xee\x88\xd9\x80\xba\x82\x62\x92\x95\x33\x56\x7b\x88\x0c\x57\x80\x8b\x67\x7c\x6e\x8d\xa4\xe1\x80\x9b\xb6\xfd\x6f\x78\x33\xd6\x21\xca\xbc\x9e\xec\x58\x16\xc7\xbe\x79\xd7\xe6\xc2\xb2\x90\xfb\x39\x8a\x36\x06\xbe\x03\x00\x00\xff\xff\x2b\x11\xe0\x47\x38\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/doc.go"].(os.FileInfo),
		fs["/health.html"].(os.FileInfo),
		fs["/index.html"].(os.FileInfo),
		fs["/template.go"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
